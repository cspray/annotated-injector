<?xml version="1.0" encoding="UTF-8" ?>
<xs:schema
    xml:lang="en"
    version="1.0"
    xmlns:xs="http://www.w3.org/2001/XMLSchema"
    xmlns="https://annotated-container.cspray.io/schema/annotated-container-definition.xsd"
    elementFormDefault="qualified"
    targetNamespace="https://annotated-container.cspray.io/schema/annotated-container-definition.xsd"
    >

  <xs:annotation>
    <xs:documentation>
      Defines how to store the compilation results of a ContainerDefinition in XML format. This format is
      intended to be used both in caching scenarios and static analysis of a container.
    </xs:documentation>
  </xs:annotation>

  <xs:element name="annotatedContainerDefinition" type="containerDefinitionType">
    <xs:annotation>
      <xs:documentation>
        The root element.
      </xs:documentation>
    </xs:annotation>
  </xs:element>

  <xs:complexType name="containerDefinitionType">
    <xs:all>
      <xs:element name="serviceDefinitions" type="serviceDefinitionsType" />
      <xs:element name="aliasDefinitions" type="aliasDefinitionsType" />
      <xs:element name="servicePrepareDefinitions" type="servicePrepareDefinitionsType" />
      <xs:element name="serviceDelegateDefinitions" type="serviceDelegateDefinitionsType" />
      <xs:element name="injectDefinitions" type="injectDefinitionsType" />
    </xs:all>
    <xs:attribute name="version" use="required" type="xs:token" />
  </xs:complexType>

  <xs:complexType name="serviceDefinitionsType">
    <xs:sequence minOccurs="0" maxOccurs="unbounded">
      <xs:element name="serviceDefinition" type="serviceDefinitionType" />
    </xs:sequence>
  </xs:complexType>

  <xs:complexType name="serviceDefinitionType">
    <xs:all>
      <xs:element name="type" type="fullyQualifiedClassNameString" />
      <xs:element name="name" type="xs:token" />
      <xs:element name="profiles" type="profilesType" />
      <xs:element name="concreteOrAbstract" type="concreteOrAbstractType" />
      <xs:element name="attribute" type="base64EncodedString" />
    </xs:all>
    <xs:attribute name="isPrimary" type="xs:boolean" default="false" />
  </xs:complexType>

  <xs:complexType name="aliasDefinitionsType">
    <xs:sequence minOccurs="0" maxOccurs="unbounded">
      <xs:element name="aliasDefinition" type="aliasDefinitionType" />
    </xs:sequence>
  </xs:complexType>

  <xs:complexType name="aliasDefinitionType">
    <xs:all>
      <xs:element name="abstractService" type="fullyQualifiedClassNameString" />
      <xs:element name="concreteService" type="fullyQualifiedClassNameString" />
    </xs:all>
  </xs:complexType>

  <xs:complexType name="servicePrepareDefinitionsType">
    <xs:sequence minOccurs="0" maxOccurs="unbounded">
      <xs:element name="servicePrepareDefinition" type="servicePrepareDefinitionType" />
    </xs:sequence>
  </xs:complexType>

  <xs:complexType name="servicePrepareDefinitionType">
    <xs:all>
      <xs:element name="type" type="fullyQualifiedClassNameString" />
      <xs:element name="method" type="classMethodString" />
      <xs:element name="attribute" type="base64EncodedString" />
    </xs:all>
  </xs:complexType>

  <xs:complexType name="serviceDelegateDefinitionsType">
    <xs:sequence minOccurs="0" maxOccurs="unbounded">
      <xs:element name="serviceDelegateDefinition" type="serviceDelegateDefinitionType" />
    </xs:sequence>
  </xs:complexType>

  <xs:complexType name="serviceDelegateDefinitionType">
    <xs:all>
      <xs:element name="service" type="fullyQualifiedClassNameString" />
      <xs:element name="delegateType" type="fullyQualifiedClassNameString" />
      <xs:element name="delegateMethod" type="classMethodString" />
      <xs:element name="attribute" type="base64EncodedString" />
    </xs:all>
  </xs:complexType>

  <xs:complexType name="injectDefinitionsType">
    <xs:sequence minOccurs="0" maxOccurs="unbounded">
      <xs:element name="injectDefinition" type="injectDefinitionType" />
    </xs:sequence>
  </xs:complexType>

  <xs:complexType name="injectDefinitionType">
    <xs:all>
      <xs:element name="class" type="fullyQualifiedClassNameString" />
      <xs:element name="method" type="classMethodString" />
      <xs:element name="parameter" type="classMethodParameterString" />
      <xs:element name="valueType" type="base64EncodedString" />
      <xs:element name="value" type="base64EncodedString" />
      <xs:element name="profiles" type="profilesType" />
      <xs:element name="store" type="xs:token" />
      <xs:element name="attribute" type="base64EncodedString" />
    </xs:all>
  </xs:complexType>

  <xs:complexType name="profilesType">
    <xs:sequence maxOccurs="unbounded">
      <xs:element name="profile" type="profileString" />
    </xs:sequence>
  </xs:complexType>

  <xs:simpleType name="profileString">
    <xs:restriction base="xs:string">
      <xs:minLength value="1" />
    </xs:restriction>
  </xs:simpleType>

  <xs:simpleType name="concreteOrAbstractType">
    <xs:restriction base="xs:string">
      <xs:enumeration value="Concrete" />
      <xs:enumeration value="Abstract" />
    </xs:restriction>
  </xs:simpleType>

  <xs:simpleType name="fullyQualifiedClassNameString">
    <xs:restriction base="xs:string">
      <xs:minLength value="1" />
      <xs:pattern value="[a-zA-Z_&#x80;-&#xff;][a-zA-Z0-9_&#x80;-&#xff;]*(\\[a-zA-Z_&#x80;-&#xff;][a-zA-Z0-9_&#x80;-&#xff;]*)*" />
    </xs:restriction>
  </xs:simpleType>

  <xs:simpleType name="serviceString">
    <xs:restriction base="xs:string">

    </xs:restriction>
  </xs:simpleType>

  <xs:simpleType name="classMethodString">
    <xs:restriction base="xs:string">
      <xs:minLength value="1" />
      <xs:pattern value="[a-zA-Z_&#x80;-&#xff;][a-zA-Z0-9_&#x80;-&#xff;]*" />
    </xs:restriction>
  </xs:simpleType>

  <xs:simpleType name="classMethodParameterString">
    <xs:restriction base="xs:string">
      <xs:minLength value="1" />
      <xs:pattern value="[a-zA-Z_&#x80;-&#xff;][a-zA-Z0-9_&#x80;-&#xff;]*" />
    </xs:restriction>
  </xs:simpleType>

  <xs:simpleType name="base64EncodedString">
    <xs:restriction base="xs:base64Binary">
    </xs:restriction>
  </xs:simpleType>
</xs:schema>