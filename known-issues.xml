<?xml version="1.0" encoding="UTF-8"?>
<files psalm-version="5.24.0@462c80e31c34e58cc4f750c656be3927e80e550e">
  <file src="src/Bootstrap/ServiceWiringListener.php">
    <MixedArgument>
      <code><![CDATA[$service]]></code>
    </MixedArgument>
    <MixedAssignment>
      <code><![CDATA[$service]]></code>
    </MixedAssignment>
    <MixedReturnTypeCoercion>
      <code><![CDATA[ServiceFromServiceDefinition<T>]]></code>
      <code><![CDATA[new class($service, $serviceDefinition) implements ServiceFromServiceDefinition {
                        public function __construct(
                        private readonly object $service,
                        private readonly ServiceDefinition $definition
                        ) {
                        }

                        public function service() : object {
                            return $this->service;
                        }

                        public function definition() : ServiceDefinition {
                            return $this->definition;
                        }
                    }]]></code>
    </MixedReturnTypeCoercion>
  </file>
  <file src="src/ContainerFactory/AbstractContainerFactory.php">
    <ArgumentTypeCoercion>
      <code><![CDATA[$reference->valueType->name()]]></code>
    </ArgumentTypeCoercion>
    <MixedAssignment>
      <code><![CDATA[$params[$injectParameterValue->name]]]></code>
    </MixedAssignment>
    <MixedInferredReturnType>
      <code><![CDATA[list<object>|object]]></code>
    </MixedInferredReturnType>
    <MixedReturnStatement>
      <code><![CDATA[$reference->listOf->toCollection($values)]]></code>
    </MixedReturnStatement>
  </file>
  <file src="src/ContainerFactory/AurynContainerFactory.php">
    <MethodSignatureMismatch>
      <code><![CDATA[$id]]></code>
    </MethodSignatureMismatch>
    <MissingClosureReturnType>
      <code><![CDATA[fn() => $this->serviceCollectorReferenceToListOfServices($containerBuilder, $state, $definition, $value)]]></code>
    </MissingClosureReturnType>
    <MixedAssignment>
      <code><![CDATA[$parameterValue]]></code>
      <code><![CDATA[$params[$name]]]></code>
      <code><![CDATA[$value]]></code>
    </MixedAssignment>
    <MixedInferredReturnType>
      <code><![CDATA[T]]></code>
      <code><![CDATA[object]]></code>
      <code><![CDATA[object]]></code>
    </MixedInferredReturnType>
    <MixedMethodCall>
      <code><![CDATA[name]]></code>
    </MixedMethodCall>
    <MixedReturnStatement>
      <code><![CDATA[$container->make($definition->type()->name())]]></code>
      <code><![CDATA[$injector->execute(
                        [$serviceDelegateDefinition->classMethod()->class()->name(), $serviceDelegateDefinition->classMethod()->methodName()],
                        $this->parametersForServiceDelegateToArray($injector, $state, $serviceDelegateDefinition),
                    )]]></code>
      <code><![CDATA[$value]]></code>
    </MixedReturnStatement>
  </file>
  <file src="src/ContainerFactory/ContainerFactoryOptionsBuilder.php">
    <PropertyNotSetInConstructor>
      <code><![CDATA[$activeProfiles]]></code>
    </PropertyNotSetInConstructor>
  </file>
  <file src="src/ContainerFactory/IlluminateContainerFactory.php">
    <MethodSignatureMismatch>
      <code><![CDATA[$id]]></code>
    </MethodSignatureMismatch>
    <MissingClosureReturnType>
      <code><![CDATA[fn() => $containerBuilder->get($value->name)]]></code>
      <code><![CDATA[fn() => $this->serviceCollectorReferenceToListOfServices($containerBuilder, $state, $definition, $value)]]></code>
      <code><![CDATA[static fn(Closure $closure) => $closure()]]></code>
      <code><![CDATA[static fn(Closure $closure) => $closure()]]></code>
    </MissingClosureReturnType>
    <MixedArgument>
      <code><![CDATA[$value]]></code>
    </MixedArgument>
    <MixedAssignment>
      <code><![CDATA[$params[$parameter->name()]]]></code>
      <code><![CDATA[$target]]></code>
      <code><![CDATA[$value]]></code>
      <code><![CDATA[$value]]></code>
    </MixedAssignment>
    <MixedInferredReturnType>
      <code><![CDATA[object]]></code>
      <code><![CDATA[object]]></code>
      <code><![CDATA[object]]></code>
    </MixedInferredReturnType>
    <MixedReturnStatement>
      <code><![CDATA[$container->call(
                        [$target, $serviceDelegateDefinition->classMethod()->methodName()],
                        array_map(static fn(Closure $closure) => $closure(), $this->parametersForServiceDelegateToArray($container, $state, $serviceDelegateDefinition)),
                    )]]></code>
      <code><![CDATA[$container->get($definition->type()->name())]]></code>
      <code><![CDATA[$container->get($definition->type()->name())]]></code>
      <code><![CDATA[$object]]></code>
    </MixedReturnStatement>
    <NoValue>
      <code><![CDATA[$object]]></code>
    </NoValue>
  </file>
  <file src="src/ContainerFactory/PhpDiContainerFactory.php">
    <InvalidArgument>
      <code><![CDATA[$container]]></code>
      <code><![CDATA[$container]]></code>
    </InvalidArgument>
    <MethodSignatureMismatch>
      <code><![CDATA[$id]]></code>
    </MethodSignatureMismatch>
    <MixedArgument>
      <code><![CDATA[$value->name()]]></code>
    </MixedArgument>
    <MixedAssignment>
      <code><![CDATA[$params[$parameter->name()]]]></code>
      <code><![CDATA[$value]]></code>
      <code><![CDATA[$value]]></code>
    </MixedAssignment>
    <MixedInferredReturnType>
      <code><![CDATA[object]]></code>
      <code><![CDATA[object]]></code>
    </MixedInferredReturnType>
    <MixedMethodCall>
      <code><![CDATA[name]]></code>
    </MixedMethodCall>
    <MixedReturnStatement>
      <code><![CDATA[$container->call(
                         [$serviceDelegateDefinition->classMethod()->class()->name(), $serviceDelegateDefinition->classMethod()->methodName()],
                         $this->parametersForServiceDelegateToArray($container, $state, $serviceDelegateDefinition),
                     )]]></code>
      <code><![CDATA[$container->get($definition->type()->name())]]></code>
      <code><![CDATA[$object]]></code>
    </MixedReturnStatement>
    <PossiblyUndefinedMethod>
      <code><![CDATA[constructorParameter]]></code>
      <code><![CDATA[name]]></code>
    </PossiblyUndefinedMethod>
    <RedundantFunctionCallGivenDocblockType>
      <code><![CDATA[array_values]]></code>
    </RedundantFunctionCallGivenDocblockType>
  </file>
  <file src="src/ContainerFactory/State/ContainerFactoryState.php">
    <ArgumentTypeCoercion>
      <code><![CDATA[array_keys($scoredInjectDefinitions)]]></code>
    </ArgumentTypeCoercion>
    <InvalidDocblock>
      <code><![CDATA[$prioritizedParams]]></code>
    </InvalidDocblock>
    <PossiblyInvalidArgument>
      <code><![CDATA[$type]]></code>
    </PossiblyInvalidArgument>
  </file>
  <file src="src/Definition/DefinitionFactory.php">
    <ArgumentTypeCoercion>
      <code><![CDATA[$method]]></code>
      <code><![CDATA[$objectType->name()]]></code>
    </ArgumentTypeCoercion>
    <LessSpecificReturnStatement>
      <code><![CDATA[$this->method]]></code>
      <code><![CDATA[$this->method]]></code>
      <code><![CDATA[$this->parameter]]></code>
    </LessSpecificReturnStatement>
    <MixedArgument>
      <code><![CDATA[$returnTypeName]]></code>
      <code><![CDATA[$returnTypeName]]></code>
    </MixedArgument>
    <MoreSpecificReturnType>
      <code><![CDATA[string]]></code>
      <code><![CDATA[string]]></code>
      <code><![CDATA[string]]></code>
    </MoreSpecificReturnType>
    <UndefinedMethod>
      <code><![CDATA[getName]]></code>
    </UndefinedMethod>
  </file>
  <file src="src/Definition/Serializer/XmlContainerDefinitionSerializer.php">
    <ArgumentTypeCoercion>
      <code><![CDATA[$domElement->nodeValue]]></code>
      <code><![CDATA[static fn(DOMElement $domElement) => types()->class($domElement->nodeValue)]]></code>
      <code><![CDATA[static fn(DOMElement $domElement) => types()->fromName($domElement->nodeValue)]]></code>
    </ArgumentTypeCoercion>
    <MixedArgument>
      <code><![CDATA[$attr]]></code>
      <code><![CDATA[$attr]]></code>
      <code><![CDATA[$attr]]></code>
      <code><![CDATA[$valueType]]></code>
      <code><![CDATA[$valueTypeElement]]></code>
    </MixedArgument>
    <MixedAssignment>
      <code><![CDATA[$attr]]></code>
      <code><![CDATA[$attr]]></code>
      <code><![CDATA[$attr]]></code>
    </MixedAssignment>
    <PossiblyNullArgument>
      <code><![CDATA[$attr]]></code>
      <code><![CDATA[$domElement->nodeValue]]></code>
      <code><![CDATA[$domElement->nodeValue]]></code>
      <code><![CDATA[$xpath->query('cd:attribute/text()', $delegateDefinition)[0]?->nodeValue]]></code>
      <code><![CDATA[$xpath->query('cd:attribute/text()', $prepareDefinition)[0]?->nodeValue]]></code>
      <code><![CDATA[$xpath->query('cd:attribute/text()', $serviceDefinition)[0]?->nodeValue]]></code>
    </PossiblyNullArgument>
    <PossiblyUndefinedVariable>
      <code><![CDATA[$valueType]]></code>
      <code><![CDATA[$valueTypeElement]]></code>
    </PossiblyUndefinedVariable>
  </file>
  <file src="src/Reflection/TypeFactory.php">
    <PossiblyInvalidArgument>
      <code><![CDATA[$intersectTypes]]></code>
      <code><![CDATA[$intersectTypes]]></code>
      <code><![CDATA[$intersectTypes]]></code>
      <code><![CDATA[$unionTypes]]></code>
      <code><![CDATA[$unionTypes]]></code>
      <code><![CDATA[$unionTypes]]></code>
    </PossiblyInvalidArgument>
  </file>
  <file src="src/StaticAnalysis/AnnotatedTargetContainerDefinitionAnalyzer.php">
    <ArgumentTypeCoercion>
      <code><![CDATA[array_map(static fn(AttributeType $attributeType) => $attributeType->value, AttributeType::cases())]]></code>
    </ArgumentTypeCoercion>
    <InvalidArgument>
      <code><![CDATA[$dirs]]></code>
    </InvalidArgument>
  </file>
  <file src="src/StaticAnalysis/ContainerDefinitionAnalysisOptionsBuilder.php">
    <LessSpecificReturnStatement>
      <code><![CDATA[$this->directories]]></code>
    </LessSpecificReturnStatement>
    <MoreSpecificReturnType>
      <code><![CDATA[array]]></code>
    </MoreSpecificReturnType>
  </file>
</files>
